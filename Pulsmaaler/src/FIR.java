import java.util.ArrayList;
import java.util.Arrays;
// http://ptolemy.eecs.berkeley.edu/eecs20/week12/implementation.html
// Hentet herfra. Det skal nok skrives så det ikke ligner plagiat. 
// Koefficienterne er udregnet af http://t-filter.engineerjs.com/
// Der er også et 

public class FIR {
	private int length;
	private double[] delayLine;
	private double[] impulseResponse;
	private int count = 0;
	public double skalar;

	public FIR(double[] coefs) {
		length = coefs.length;
		impulseResponse = coefs;
		delayLine = new double[length];
		skalar = skalering(coefs);
	}

	public double getOutputSample(double inputSample) {
		delayLine[count] = inputSample;
		double result = 0.0;
		int index = count;
		for (int i = 0; i < length; i++) {
			result += impulseResponse[i] * delayLine[index--];
			if (index < 0)
				index = length - 1;
		}
		if (++count >= length)
			count = 0;
		return result;
	}

	public double skalering(double[] koefficienter) {
		double sum = 0;
		for (double tal : koefficienter) {
			sum += tal;
		}
		return sum;
	}

	public static void main(String[] args) {
		double[] koefficienter = new double[] { -0.01848733539901468, -0.004697261930006856, -0.004902386645048927,
				-0.004801410715111465, -0.0043450816472306395, -0.0034818048903389564, -0.0021827004413242242,
				-0.00041714534849843584, 0.001832079474038595, 0.004565523069681175, 0.007762812096707765,
				0.011388553989575875, 0.015390073509491235, 0.019698358387156556, 0.024230638324742818,
				0.028892968627915617, 0.033582080889252214, 0.038187478968912836, 0.04259668419510449,
				0.0466928554823861, 0.05036364557494971, 0.053509170988702434, 0.05605952940860643,
				0.057941196156029294, 0.059102005770943426, 0.05943902947411983, 0.059102005770943426,
				0.057941196156029294, 0.05605952940860643, 0.053509170988702434, 0.05036364557494971,
				0.0466928554823861, 0.04259668419510449, 0.038187478968912836, 0.033582080889252214,
				0.028892968627915617, 0.024230638324742818, 0.019698358387156556, 0.015390073509491235,
				0.011388553989575875, 0.007762812096707765, 0.004565523069681175, 0.001832079474038595,
				-0.00041714534849843584, -0.0021827004413242242, -0.0034818048903389564, -0.0043450816472306395,
				-0.004801410715111465, -0.004902386645048927, -0.004697261930006856, -0.01848733539901468 };

		double[] nyeKoeff = new double[] { -0.005790971968579455, -0.0016914204666226684, -0.0018843635085074118,
				-0.002050473677114152, -0.002180054224353485, -0.0022625221529621563, -0.002287815734377963,
				-0.00224560580166865, -0.0021245808099482387, -0.0019171544295382601, -0.0016039920346966935,
				-0.0011976164334236798, -0.0006628530701148304, -0.000007731040172825967, 0.0007701150949619668,
				0.0016794573650217453, 0.0027257251321815643, 0.003907819255531189, 0.005221196387092289,
				0.006662345770641899, 0.008224102913472189, 0.009903557392250356, 0.01168519499965433,
				0.013560836820519416, 0.015515191900856568, 0.017529797925762394, 0.019586770170979755,
				0.021668637039765386, 0.023755329979769018, 0.02582415884284531, 0.027854216221964687,
				0.029823011590910564, 0.0317110655195153, 0.03349428476903138, 0.03515237502805645, 0.03666613485398455,
				0.03801764493611727, 0.0391900482289899, 0.04016979231125777, 0.04094555255457108, 0.04150649289256357,
				0.041845632962081984, 0.04195857280289159, 0.041845632962081984, 0.04150649289256357,
				0.04094555255457108, 0.04016979231125777, 0.0391900482289899, 0.03801764493611727, 0.03666613485398455,
				0.03515237502805645, 0.03349428476903138, 0.0317110655195153, 0.029823011590910564,
				0.027854216221964687, 0.02582415884284531, 0.023755329979769018, 0.021668637039765386,
				0.019586770170979755, 0.017529797925762394, 0.015515191900856568, 0.013560836820519416,
				0.01168519499965433, 0.009903557392250356, 0.008224102913472189, 0.006662345770641899,
				0.005221196387092289, 0.003907819255531189, 0.0027257251321815643, 0.0016794573650217453,
				0.0007701150949619668, -0.000007731040172825967, -0.0006628530701148304, -0.0011976164334236798,
				-0.0016039920346966935, -0.0019171544295382601, -0.0021245808099482387, -0.00224560580166865,
				-0.002287815734377963, -0.0022625221529621563, -0.002180054224353485, -0.002050473677114152,
				-0.0018843635085074118, -0.0016914204666226684, -0.005790971968579455, };

		// double sum = filter.skalar(koefficienter);

		TestSensor s = new TestSensor();
		/*
		 * ArrayList<String> liste = s.hentMaalinger(samples); double [] data =
		 * new double[samples]; for(int i = 0; i<liste.size(); i++){ data[i] =
		 * Double.parseDouble(liste.get(i)); }
		 */
		double[] data = new double[] { 4.16, 4.11, 4.06, 4, 3.94, 3.88, 3.82, 3.75, 3.68, 3.61, 3.54, 3.46, 3.38, 3.31,
				3.23, 3.15, 3.09, 3.02, 2.95, 2.9, 2.84, 2.78, 2.73, 2.69, 2.64, 2.6, 2.57, 2.54, 2.51, 2.49, 2.47,
				2.45, 2.43, 2.41, 2.39, 2.37, 2.34, 2.34, 2.33, 2.32, 2.3, 2.29, 2.28, 2.25, 2.23, 2.19, 2.17, 2.14,
				2.13, 2.12, 2.12, 2.14, 2.16, 2.19, 2.23, 2.27, 2.31, 2.35, 2.4, 2.45, 2.5, 2.55, 2.6, 2.65, 2.7, 2.74,
				2.79, 2.83, 2.87, 2.91, 2.93, 2.96, 2.98, 2.99, 3, 3, 2.99, 2.98, 2.96, 2.93, 2.91, 2.88, 2.85, 2.81,
				2.77, 2.72, 2.67, 2.61, 2.54, 2.48, 2.41, 2.33, 2.26, 2.18, 2.1, 2.02, 1.93, 1.84, 1.75, 1.67, 1.58,
				1.5, 1.44, 1.37, 1.32, 1.28, 1.25, 1.23, 1.21, 1.19, 1.19, 1.18, 1.19, 1.22, 1.24, 1.28, 1.32, 1.36,
				1.41, 1.46, 1.52, 1.58, 1.65, 1.72, 1.79, 1.87, 1.94, 2.02, 2.1, 2.19, 2.27, 2.34, 2.42, 2.5, 2.57,
				2.64, 2.7, 2.74, 2.78, 2.81, 2.83, 2.83, 2.82, 2.79, 2.75, 2.71, 2.65, 2.58, 2.51, 2.43, 2.34, 2.24,
				2.13, 2.02, 1.91, 1.81, 1.7, 1.6, 1.5, 1.4, 1.29, 1.2, 1.1, 1.01, 0.92, 0.85, 0.79, 0.74, 0.69, 0.65,
				0.63, 0.61, 0.6, 0.59, 0.59, 0.59, 0.6, 0.62, 0.64, 0.68, 0.73, 0.78, 0.85, 0.92, 0.98, 1.05, 1.11,
				1.19, 1.25, 1.33, 1.4, 1.46, 1.53, 1.59, 1.65, 1.7, 1.75, 1.79, 1.83, 1.86, 1.88, 1.89, 1.9, 1.9, 1.9,
				1.89, 1.88, 1.87, 1.85, 1.82, 1.8, 1.78, 1.77, 1.77, 1.78, 1.81, 1.84, 1.88, 1.92, 1.97, 2.02, 2.08,
				2.13, 2.2, 2.27, 2.33, 2.39, 2.46, 2.52, 2.59, 2.65, 2.71, 2.77, 2.83, 2.89, 2.94, 2.99, 3.04, 3.09,
				3.13, 3.17, 3.2, 3.23, 3.25, 3.25, 3.25, 3.25, 3.24, 3.23, 3.21, 3.19, 3.17, 3.15, 3.13, 3.11, 3.09,
				3.06, 3.03, 2.99, 2.95, 2.91, 2.86, 2.8, 2.75, 2.69, 2.62, 2.54, 2.46, 2.37, 2.28, 2.18, 2.08, 1.96,
				1.85, 1.74, 1.63, 1.51, 1.4, 1.28, 1.17, 1.07, 0.97, 0.88, 0.8, 0.73, 0.67, 0.63, 0.59, 0.58, 0.57,
				0.58, 0.6, 0.63, 0.68, 0.74, 0.8, 0.85, 0.92, 0.98, 1.04, 1.09, 1.14, 1.19, 1.24, 1.28, 1.32, 1.36,
				1.41, 1.46, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 1.89, 1.94, 1.98, 2.03, 2.06, 2.09, 2.11, 2.14,
				2.15, 2.16, 2.17, 2.17, 2.17, 2.16, 2.15, 2.13, 2.11, 2.08, 2.03, 1.99, 1.93, 1.87, 1.79, 1.71, 1.63,
				1.53, 1.43, 1.33, 1.21, 1.1, 0.99, 0.87, 0.75, 0.64, 0.54, 0.44, 0.35, 0.27, 0.21, 0.16, 0.11, 0.07,
				0.05, 0.04, 0.04, 0.07, 0.12, 0.18, 0.26, 0.36, 0.48, 0.61, 0.75, 0.89, 1.04, 1.19, 1.34, 1.48, 1.62,
				1.75, 1.88, 2, 2.11, 2.21, 2.3, 2.37, 2.44, 2.49, 2.52, 2.55, 2.57, 2.57, 2.57, 2.56, 2.54, 2.5, 2.47,
				2.42, 2.36, 2.29, 2.23, 2.16, 2.08, 1.99, 1.89, 1.8, 1.7, 1.62, 1.53, 1.45, 1.31, 1.25, 1.2, 1.15, 1.11,
				1.07, 1.04, 1.01, 1, 0.98, 0.98, 0.98, 0.99, 1.01, 1.03, 1.05, 1.08, 1.12, 1.16, 1.21, 1.26, 1.32, 1.39,
				1.46, 1.54, 1.62, 1.7, 1.78, 1.86, 1.94, 2.02, 2.1, 2.18, 2.26, 2.33, 2.4, 2.47, 2.54, 2.6, 2.65, 2.7,
				2.74, 2.78, 2.82, 2.85, 2.87, 2.89, 2.91, 2.92, 2.92, 2.91, 2.91, 2.89, 2.88, 2.85, 2.82, 2.79, 2.74,
				2.7, 2.64, 2.58, 2.52, 2.46, 2.39, 2.32, 2.26, 2.19, 2.12, 2.06, 1.99, 1.92, 1.85, 1.79, 1.74, 1.69,
				1.66, 1.63, 1.62, 1.61, 1.61, 1.61, 1.62, 1.64, 1.65, 1.67, 1.68, 1.7, 1.73, 1.75, 1.77, 1.79, 1.8,
				1.82, 1.83, 1.84, 1.84, 1.85, 1.85, 1.85, 1.85, 1.85, 1.85, 1.86, 1.85, 1.86, 1.86, 1.85, 1.85, 1.85,
				1.85, 1.85, 1.85, 1.84, 1.83, 1.82, 1.81, 1.8, 1.78, 1.77, 1.76, 1.75, 1.76, 1.77, 1.8, 1.84, 1.89,
				1.96, 2.04, 2.13, 2.22, 2.32, 2.42, 2.51, 2.61, 2.71, 2.81, 2.91, 2.99, 3.08, 3.15, 3.22, 3.27, 3.31,
				3.34, 3.37, 3.39, 3.4, 3.4, 3.4, 3.39, 3.38, 3.37, 3.36, 3.35, 3.34, 3.33, 3.32, 3.31, 3.3, 3.29, 3.28,
				3.27, 3.25, 3.24, 3.23, 3.22, 3.2, 3.19, 3.17, 3.16, 3.14, 3.13, 3.11, 3.09, 3.07, 3.04, 3.01, 2.97,
				2.93, 2.89, 2.84, 2.79, 2.74, 2.69, 2.63, 2.57, 2.5, 2.43, 2.35, 2.26, 2.16, 2.05, 1.93, 1.82 };
		// double[] nyData = new double[data.length];
		/*
		 * for (int j = 0; j < data.length; j++) { data[j] =
		 * filter.getOutputSample(data[j]); data[j] = data[j] / filter.skalar; }
		 */

		ArrayList<Double> inddata = new ArrayList<>();
		for (int i = 0; i < data.length; i++) {
			inddata.add(data[i]);
		}
		/*
		 * for (double tal : data) { System.out.println(tal); }
		 */

		Pulsberegner p = new Pulsberegner(inddata.size(), 5);
		System.out.println(p.beregnVer2(inddata));
	}
}
